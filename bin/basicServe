#!/usr/bin/env node

const fs = require('fs');
const http = require('http');
const path = require('path');

const defaultListenPort = 8080;

function getOptions() {
  const args = process.argv.slice(2);

  let listenPort = defaultListenPort;
  let serveDir = process.cwd();

  for (let i = 0, l = args.length; i < l; i++) {
    const arg = args[i];
    if (arg.startsWith('-')) {
      if (arg === '-h' || arg === '--help') {
        console.log('\n'+
          'Usage: basicServe [options] <directory_to_serve>\n\n'+
          'Options:\n\n'+
          '  -h, --help    output usage information\n'+
          '  -p, --port    listen port (default: 8080)\n'
        );
        process.exit(0);
      } else if (arg === '-p' || arg === '--port') {
        listenPort = parseInt(args[++i], 10);
      }
    } else {
      serveDir = arg;
    }
  }

  return {
    listenPort,
    serveDir,
  };
}

const options = getOptions();

const pathMappings = {
  '/': '/index.html'
};

const contentTypeForExtension = {
  '.apng': 'image/apng',
  '.bmp': 'image/bmp',
  '.css': 'text/css',
  '.cur': 'image/x-icon',
  '.html': 'text/html',
  '.gif': 'image/gif',
  '.gzip': 'application/gzip',
  '.ico': 'image/x-icon',
  '.jfif': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.jpg': 'image/jpeg',
  '.js': 'text/javascript',
  '.json': 'application/json',
  '.otf': 'font/otf',
  '.pdf': 'application/pdf',
  '.pjp': 'image/jpeg',
  '.pjpeg': 'image/jpeg',
  '.png': 'image/png',
  '.sfnt': 'font/sfnt',
  '.svg': 'image/svg+xml',
  '.tif': 'image/tiff',
  '.tiff': 'image/tiff',
  '.ttf': 'font/ttf',
  '.txt': 'text/plain',
  '.webp': 'image/webp',
  '.woff': 'font/woff',
  '.woff2': 'font/woff2',
  '.xml': 'application/xml',
  '.zip': 'application/zip',
};

const server = http.createServer((request, response) => {
  const url = request.url;
  const urlPath = url.split('?')[0];
  const mappedPath = pathMappings[urlPath] || urlPath;
  const filePath = path.join(options.serveDir, mappedPath);
  const extension = path.extname(filePath);
  const contentType = contentTypeForExtension[extension];
  if (contentType) {
    console.log(`${url} -> ${filePath} (${contentType})`);
  } else {
    console.log(`${url} -> ${filePath}`);
  }
  fs.readFile(filePath, (err, data) => {
    if (err) {
      response.writeHead(404).end();
    } else {
      if (contentType) {
        response.setHeader('Content-Type', contentType);
      }
      response.writeHead(200).end(data);
    }
  });
});

server.listen(options.listenPort);
console.log(`serving ${options.serveDir} at http://localhost:${options.listenPort}`);
